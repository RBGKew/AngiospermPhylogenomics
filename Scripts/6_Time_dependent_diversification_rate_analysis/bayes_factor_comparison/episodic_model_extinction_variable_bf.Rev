mvi = 0
mni = 0

observed_tree <- readTrees("young_tree_smoothing_10_pruned_for_diversification_analyses.tre")[1]
taxa <- observed_tree.taxa()
root <- observed_tree.rootAge()
tree_length <- observed_tree.treeLength()
interval_times <- v(19.379061, 122.989999)
num_intervals <- interval_times.size() + 1
rho <- 0.02909027
source("sampling_fractions.Rev")

##################
##################

###global hyperprior defined in revgadgets and also variation###

speciation_value ~ dnExponential(5)
speciation_value.setValue(0.2)
moves[++mvi] = mvScaleBactrian(speciation_value, lambda=1, weight=3, tune=true)
moves[++mvi] = mvScaleBactrian(speciation_value, lambda=0.1, weight=3, tune=true)
moves[++mvi] = mvScaleBactrian(speciation_value, lambda=0.01, weight=3, tune=true)

speciation := rep(speciation_value, num_intervals)

###################

scaler ~ dnBeta(4,1)
moves[++mvi]=mvScale(scaler)
moves[++mvi] = mvScale(scaler,lambda=1,weight=3.0, tune=true)
moves[++mvi] = mvScale(scaler,lambda=0.1,weight=3.0, tune=true)
moves[++mvi] = mvScale(scaler,lambda=0.01,weight=3.0, tune=true)

extinction_init := abs(scaler*speciation_value)
log_extinction_present := ln(extinction_init)

for (i in 1:(num_intervals-1)){
local_variation[i] ~ dnExponential(5)
moves[++mvi] = mvScaleBactrian(local_variation[i], lambda=1, weight=3, tune=true)
log_extinction_other[i] ~ dnNormal(0, sd=local_variation[i]) 
}

extinction := fnassembleContinuousMRF(log_extinction_present,log_extinction_other,initialValueIsLogScale=TRUE,order=1)

###moves###########

moves[++mvi] = mvEllipticalSliceSamplingSimple(log_extinction_other,weight=5,tune=FALSE) 
#moves[++mvi] = mvHSRFIntervalSwap(log_extinction_other, local_variation, weight=5)

###################
###################
timetree ~ dnEpisodicBirthDeath(rootAge=root,
lambdaRates=speciation, 
lambdaTimes=interval_times, 
muRates=extinction, 
muTimes=interval_times, 
rho <- 0.02909027, 
taxa=taxa,
incompleteClades=missing_species_per_clade,
condition="time")
timetree.clamp(observed_tree)
###################
###################
mymodel = model(speciation)

###################

monitors[++mni] = mnScreen(printgen=10)

###################

ss_analysis = powerPosterior(mymodel, monitors, moves, "output/" + "test" + "/ss", cats=12, alpha=0.3)
ss_analysis.burnin(generations=10000, tuningInterval=100)
ss_analysis.run(generations=12500, tuningInterval=500)
ss = steppingStoneSampler("output/" + "test" + "/ss", "power", "likelihood", TAB)
ss.marginal()



